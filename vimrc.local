" general options {
    "autocmd  FileType  php setlocal omnifunc=phpcomplete_extended#CompletePHP
    let g:rainbow_active = 1 
    let g:brightest#highlight = {"group": "BrightestUnderline"}
    imap <ESC>oA <ESC>ki
    set gdefault " don't need to add /g in search/replace
    set nofoldenable " disable code folding
    set nospell " disable spell check
    set undodir=~/.vim/undo
    set virtualedit=block "free block select
    set wrap " don't cut lines
    set nocursorline
    set tabpagemax=25
    set viewoptions=folds,cursor,unix,slash

    let loaded_matchparen=1 " this makes vim epic fast with long lines
    set timeoutlen=250 " lower leader key timeout
    set ttyfast
    set synmaxcol=320
    set lazyredraw " to avoid scrolling problems

    set t_ts=]2;
    set t_fs=
    set iskeyword-=$
    set iskeyword-=-

    " symfony autocomplete
    let g:spf13_no_autochdir = 1

    " use ag over grep
    if executable('ag')
      set grepprg=ag\ --nogroup\ --nocolor
    endif

    " from https://bitbucket.org/sjl/dotfiles/src/1b6ffba66e9f/vim/.vimrc {
        " Sudo to write
        cmap w!! w !sudo tee % >/dev/null
    " }
"}

" plugin options {
    " enabled groups is in .before file
    " Vundle {
        UnBundle 'Lokaltog/vim-easymotion'
        UnBundle 'spf13/vim-autoclose'
        UnBundle 'gorodinskiy/vim-coloresque'
        UnBundle 'spf13/PIV'
        " use my fork
        UnBundle 'tpope/vim-markdown'
    " }

    " interestingwords {
        nnoremap <silent> <leader>, :call InterestingWords('n')<cr>
        nnoremap <silent> <leader>. :call UncolorAllWords()<cr>
        let g:interestingWordsTermColors = ['137', '211', '154', '121', '215', '159', '222', '126']
    " }

    " youcompleteme + ultisnips {
        let g:ycm_min_num_of_chars_for_completion = 3
        autocmd FileType html let g:ycm_min_num_of_chars_for_completion = 1
        "let g:ycm_auto_trigger = 0
        let g:UltiSnipsExpandTrigger = "<C-k>"
        let g:UltiSnipsJumpForwardTrigger = "<C-k>"
        let g:UltiSnipsJumpBackwardTrigger = "<C-j>"
    "}

    let g:php_cs_fixer_path = get(g:, 'php_cs_fixer_path', '~/bin/php-cs-fixer.phar')

    " incsearch {
        map /  <Plug>(incsearch-forward)
        map ?  <Plug>(incsearch-backward)
        map g/ <Plug>(incsearch-stay)
    "}

    " Syntastic {
        " play with angularJS
        let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
    " }

    " tagbar {
        let g:tagbar_autofocus = 1
        let g:tagbar_compact = 1
        let g:tagbar_width = 30
        let g:tagbar_type_php  = { 'ctagstype' : 'php', 'kinds' : [ 'i:interfaces', 'c:classes', 'd:constant definitions', 'f:functions', 'j:javascript functions:1' ] }
        map <c-l> :TagbarToggle<CR>
    "}

    " mark {
        hi MarkWord1  ctermbg=Red      ctermfg=Black  guibg=#FF7272    guifg=Black
        hi MarkWord2  ctermbg=Blue     ctermfg=Black  guibg=#9999FF    guifg=Black
        hi MarkWord3  ctermbg=Magenta  ctermfg=Black  guibg=#FFB3FF    guifg=Black
        hi MarkWord4  ctermbg=Green    ctermfg=Black  guibg=#A4E57E    guifg=Black
        hi MarkWord5  ctermbg=Cyan     ctermfg=Black  guibg=#8CCBEA    guifg=Black
        hi MarkWord6  ctermbg=Yellow   ctermfg=Black  guibg=#FFDB72    guifg=Black
    " }

    " PHP folder {
        let b:phpfold_use = 1 " Fold groups of use statements in the global scope.
        let b:phpfold_group_iftry = 0 " Fold if/elseif/else and try/catch/finally blocks as a group, rather than each part separate.
        let b:phpfold_group_args = 1 " Group function arguments split across multiple lines into their own fold.
        let b:phpfold_group_case = 1 " Fold case and default blocks inside switches.
        let b:phpfold_heredocs = 1 " Fold HEREDOCs and NOWDOCs.
        let b:phpfold_docblocks = 1 " Fold DocBlocks.
        let b:phpfold_doc_with_funcs = 1 " Fold DocBlocks. Overrides b:phpfold_docblocks.
        let b:phpfold_text = 1 " Enable the custom foldtext option.
    "}

    "others {
        let g:DisableAutoPHPFolding=1 " disable PIV's folding
        let g:indent_guides_enable_on_vim_startup = 0
    "}

    " golang {
        " vim-go
        let g:go_fmt_fail_silently = 1
        let g:go_highlight_functions = 1
        let g:go_highlight_methods = 1
        let g:go_highlight_structs = 1
        let g:go_highlight_operators = 1
        let g:go_highlight_build_constraints = 1
        " autoimport ftw
        "let g:go_fmt_command = "goimports"

        " go-def
        let g:godef_split=2 " open in new tab
        let g:godef_same_file_in_same_window=1
    " }
"}

" abbreviations {
    " erlang {
        iab iof io:format("~n~p~n", []),
        iab ioff io:format("~n------~n~p~n------~n", []),
        iab iofff io:format("~n------~n~p~n~p~n------~n", []),
        iab ioffff io:format("~n------~n~p~n~p~n~p~n------~n", []),
    "}

    " php {
        iab errl error_log(date('Y-m-d H:i:s') . " " . "\n", 3, '/tmp/my_error.log');
        iab ymd date('Y-m-d H:i:s',
    "}

    " others {
        ab brr . "<br/>"
    "}
"}

" mappings {
    " custom {
        " tab movement {
            nmap <C-j> :tabprevious<CR>
            nmap <C-k> :tabnext<CR>
        "}

        " git diff {
            map <c-d> :!diffwrapper %:p<cr>
            map <c-y> :!GIT_PAGER='' git diff %<cr>
            map <c-h> :!git lp %<cr>
        "}

        " tag jumping {
            nnoremap <c-]> g<c-]>
            vnoremap <c-]> g<c-]>
            nnoremap g<c-]> <c-]>
            vnoremap g<c-]> <c-]>
            nnoremap t g<c-]>
            vnoremap t g<c-]>
        "}
        " keep blocks selected when indenting {
            vnoremap < <gv
            vnoremap > >gv
        "}
    "}

    " general {
        " convert encrypted save :X in plain save :x
        cnoremap <expr> X (getcmdtype() is# ':' && empty(getcmdline())) ? 'x' : 'X'

        " make C-c behave like Esc
        inoremap <silent> <C-C> <Esc>

        " stop from entering ex mode on accident
        nnoremap Q <nop>

        " simulate emacs' transpose feature
        nnoremap <Leader><Leader>l /\<<CR>yiw?\<<CR>viwp/\<<CR>viwp:noh<CR>
        nnoremap <Leader><Leader>h ?\w\><CR>yiw/\<<CR>viwp?\w\><CR>viwp:noh<CR>a

        " copy current line sans leading/trailing whitespace
        nnoremap gy m`^yg_``"

        " next/previous word under cursor in same column
        nnoremap g* yiw/^.*\%<C-r>=col('.')<CR>c\zs<C-r>"<CR>
        nnoremap g# yiw?^.*\%<C-r>=col('.')<CR>c\zs<C-r>"<CR>" * and # without moving the cursor

        " searches will center on the line it's found in.
        map N Nzz
        map n nzz

        " fill current line with previus line word by word
        imap <expr> <c-u> matchstr(getline(line('.')-1), '\%' . virtcol('.') . 'v\%(\k\+\s\=\\|.\)')

        " make BS/DEL work as expected in visual modes
        vmap <BS> x

        " delete in normal mode to switch off highlighting till next search and clear messages
        nmap <silent> <BS> :nohlsearch<CR>

        " make Y behave like D or C
        nnoremap Y y$
    "}

    " plugins {
        vnoremap <c-d> :call PhpDocRange()<CR>
        vnoremap <c-a> :EasyAlign<Enter>

        " ctrlp
        nmap <c-f> :CtrlPMRU<CR>
        nmap <c-b> :CtrlPBuffer<CR>
        map <c-g> :CtrlPFunky<CR>
        "let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
        let g:ctrlp_funky_matchtype = 'path'
        let g:ctrlp_funky_syntax_highlight = 1
        let g:ctrlp_custom_ignore = {
            \ 'dir':  '\.git$\|\.hg$\|\.svn$',
            \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc\|\.json$' }
        let g:ctrlp_root_markers = ['.ctrlp_sp']
        let g:ctrlp_user_command = {
          \ 'types': {
            \ 0: ['.ctrlp_sp', 'cd %s && find . -type f \( -path ./app/config/\* -o -path ./src/\* -o -path ./vendor/socialpoint/\* -o -path ./vendor/symfony/\* -o -path ./web/\* -o -path ./tests/\* -o -path ./spec/\* \) -not -path "*/.git/*" -not -path "*/vendor/*/vendor/*" -not -path "*/Resources/public/*"'],
            \ 1: ['.git/', 'cd %s && git ls-files . -co --exclude-standard'],
          \ }
        \ }

        " marks
        nmap <c-m> <Plug>MarkSet
        nmap <c-x> <Plug>MarkClear </Plug></leader></silent></unique>

        " expand region
        vmap v <Plug>(expand_region_expand)
        vmap <C-v> <Plug>(expand_region_shrink)

        " php cs fixer"
        let g:php_cs_fixer_path = "~/bin/php-cs-fixer.phar" " define the path to the php-cs-fixer.phar
        let g:php_cs_fixer_level = "psr0"                   " which level ?
        let g:php_cs_fixer_config = "sf23"                  " configuration
        " If you want to define specific fixers:
        let g:php_cs_fixer_fixers_list = "phpdoc_params"
        let g:php_cs_fixer_enable_default_mapping = 1     " Enable the mapping by default (<leader>pcd)
        let g:php_cs_fixer_dry_run = 1                    " Call command with dry-run option
        let g:php_cs_fixer_verbose = 1                    " Return the output of command if 1, else an inline information.

        " git heatmap
        let g:smeargle_colouring_scheme = ''


        "\   'ctermfgs': [160, 124, 88, 52],
        "\   'ctermfgs': [124, 125, 126, 127],
        "\   'ctermfgs': [124, 130, 136, 142],
        let g:rainbow_conf = {
        \   'ctermfgs': [160, 162, 160, 162],
        \   'php': {
        \       'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody'],
        \   },
        \}
    "}
    " netdtree {
        " open if no files specified
        autocmd StdinReadPre * let s:std_in=1
        autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
        " dont quit when opening file
        let NERDTreeQuitOnOpen=0
    "}
"}

" from instanly better vim {
    " highlight column 121 (too long line)
    highlight ColorColumn ctermbg=magenta
    call matchadd('ColorColumn', '\%121v', 100)
" }

" Next and Last {
    " from https://bitbucket.org/sjl/dotfiles/src/1b6ffba66e9f/vim/.vimrc#cl-1023
    " Motion for "next/last object". For example, "din(" would go to the next "()" pair
    " and delete its contents.

    onoremap an :<c-u>call <SID>NextTextObject('a', 'f')<cr>
    xnoremap an :<c-u>call <SID>NextTextObject('a', 'f')<cr>
    onoremap in :<c-u>call <SID>NextTextObject('i', 'f')<cr>
    xnoremap in :<c-u>call <SID>NextTextObject('i', 'f')<cr>

    onoremap al :<c-u>call <SID>NextTextObject('a', 'F')<cr>
    xnoremap al :<c-u>call <SID>NextTextObject('a', 'F')<cr>
    onoremap il :<c-u>call <SID>NextTextObject('i', 'F')<cr>
    xnoremap il :<c-u>call <SID>NextTextObject('i', 'F')<cr>

    function! s:NextTextObject(motion, dir)
      let c = nr2char(getchar())

      if c ==# "b"
          let c = "("
      elseif c ==# "B"
          let c = "{"
      elseif c ==# "d"
          let c = "["
      endif

      exe "normal! ".a:dir.c."v".a:motion.c
    endfunction
" }

" Handle URL {
        " OSX only: Open a web-browser with the URL in the current line
        function! HandleURI()
            let s:uri = matchstr(getline("."), '[a-z]*:\/\/[^ >,;]*')
            echo s:uri
            if s:uri != ""
                exec "!open \"" . s:uri . "\""
            else
                echo "No URI found in line."
            endif
        endfunction
        map <leader>u :call HandleURI()<CR>
" }

" Put at the very end of your .vimrc file.
let php_var_selector_is_identifier = 0
function! PhpSyntaxOverride()
  hi! def link phpDocTags  phpDefine
  hi! def link phpDocParam phpType
  hi! phpFunctions ctermfg=172 ctermbg=NONE cterm=NONE
  hi! phpVarSelector ctermfg=69 ctermbg=NONE cterm=NONE
  hi! phpMemberSelector ctermfg=136 ctermbg=NONE cterm=NONE
endfunction

augroup phpSyntaxOverride
  autocmd!
  autocmd FileType php call PhpSyntaxOverride()
augroup END
