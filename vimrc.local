" general options {
    "colorscheme gonzalo
    "set background=light
    set gdefault " don't need to add /g in search/replace
    set nofoldenable " disable code folding
    set nospell " disable spell check
    set timeoutlen=250 " lower leader key timeout
    set ttyfast
    set undodir=~/.vim/undo
    set virtualedit=block "free block select
    set wrap " don't cut lines
    set nocursorline
    set tabpagemax=25

    set t_ts=]2;
    set t_fs=
    set iskeyword-=$
    set iskeyword-=-

    " symfony autocomplete
    let g:spf13_no_autochdir = 1

    " use ag over grep
    if executable('ag')
      set grepprg=ag\ --nogroup\ --nocolor
    endif
"}

" plugin options {
    " Vundle {
        UnBundle 'gorodinskiy/vim-coloresque'
    "}
    " neocomplcache {
        autocmd FileType php setlocal omnifunc=phpcomplete_extended#CompletePHP
        let g:phpcomplete_index_composer_command="composer.phar"
        let g:SuperTabDefaultCompletionType = "<c-x><c-o>"
        "let g:symfony_app_console_path= "/Users/gonzalo/Development/socialpoint/sp-platform-dragoncity/app/console"
        let g:acp_enableAtStartup = 0
        let g:neosnippet#disable_runtime_snippets = { "_": 1, }
    "}

    " tagbar {
        let g:tagbar_compact = 1
        let g:tagbar_width = 30
        let g:tagbar_type_php  = { 'ctagstype' : 'php', 'kinds' : [ 'i:interfaces', 'c:classes', 'd:constant definitions', 'f:functions', 'j:javascript functions:1' ] }
        map <C-l> :TagbarToggle<CR>
    "}

    " mark {
        hi MarkWord1  ctermbg=Red      ctermfg=Black  guibg=#FF7272    guifg=Black
        hi MarkWord2  ctermbg=Blue     ctermfg=Black  guibg=#9999FF    guifg=Black
        hi MarkWord3  ctermbg=Magenta  ctermfg=Black  guibg=#FFB3FF    guifg=Black
        hi MarkWord4  ctermbg=Green    ctermfg=Black  guibg=#A4E57E    guifg=Black
        hi MarkWord5  ctermbg=Cyan     ctermfg=Black  guibg=#8CCBEA    guifg=Black
        hi MarkWord6  ctermbg=Yellow   ctermfg=Black  guibg=#FFDB72    guifg=Black
    " }

    "others {
        let g:DisableAutoPHPFolding=1 " disable PIV's folding
        let g:indent_guides_enable_on_vim_startup = 0
    "}
"}

" abbreviations {
    " erlang {
        iab iof io:format("~n------~n~p~n------~n", []),
        iab ioff io:format("~n------~n~p~n~p~n------~n", []),
        iab iofff io:format("~n------~n~p~n~p~n~p~n------~n", []),
    "}

    " php {
        iab errl error_log(date('Y-m-d H:i:s') . " " . "\n", 3, '/tmp/my_error.log');
        iab ymd date('Y-m-d H:i:s',
    "}

    " others {
        ab brr . "<br/>"
    "}
"}

" mappings {
    " custom {
        " tab movement {
            nmap <C-j> :tabprevious<CR>
            nmap <C-k> :tabnext<CR>
        "}

        " file upload {
            nmap <C-a> :w<CR>:!up2prod %:p gonzalo<CR>
            nmap <c-x> :w<CR>:!ffrefresh<CR><CR>
            "nmap <C-s> :w<CR>:!upload2prod %:p gonzalo<CR><CR>
            "nmap <c-x> :w<CR>:!upload2prod %:p gonzalo && ffrefresh<CR><CR>
        "}

        " git diff {
            map <c-d> :!diffwrapper %:p<cr>
            map <c-g> :!GIT_PAGER='' git diff %<cr>
            map <c-h> :!git lg %<cr>
        "}

        " tag jumping {
            nnoremap <c-]> g<c-]>
            vnoremap <c-]> g<c-]>
            nnoremap g<c-]> <c-]>
            vnoremap g<c-]> <c-]>
            nnoremap t g<c-]>
            vnoremap t g<c-]>
        "}
        " keep blocks selected when indenting {
            vnoremap < <gv
            vnoremap > >gv
        "}
    "}

    " general {
        " convert encrypted save :X in plain save :x
        cnoremap <expr> X (getcmdtype() is# ':' && empty(getcmdline())) ? 'x' : 'X'

        " make C-c behave like Esc
        inoremap <silent> <C-C> <Esc>
        nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR> " bind K to grep word under cursor

        " stop from entering ex mode on accident
        nnoremap Q <nop>

        " simulate emacs' transpose feature
        nnoremap <Leader><Leader>l /\<<CR>yiw?\<<CR>viwp/\<<CR>viwp:noh<CR>
        nnoremap <Leader><Leader>h ?\w\><CR>yiw/\<<CR>viwp?\w\><CR>viwp:noh<CR>a

        " match indent of next line to beginning of current word
        nnoremap <Leader><Tab> yiwy0o""pVr J

        " clear normal/visual mode highlighting
        noremap <Space> :<c-u>noh<CR>:echo<CR>

        " copy current line sans leading/trailing whitespace
        nnoremap gy m`^yg_``"

        " next/previous word under cursor in same column
        nnoremap g* yiw/^.*\%<C-r>=col('.')<CR>c\zs<C-r>"<CR>
        nnoremap g# yiw?^.*\%<C-r>=col('.')<CR>c\zs<C-r>"<CR>" * and # without moving the cursor

        " searches will center on the line it's found in.
        map N Nzz
        map n nzz

        " fill current line with previus line word by word
        imap <expr> <c-u> matchstr(getline(line('.')-1), '\%' . virtcol('.') . 'v\%(\k\+\s\=\\|.\)')

        " make BS/DEL work as expected in visual modes
        vmap <BS> x

        " delete in normal mode to switch off highlighting till next search and clear messages
        nmap <silent> <BS> :nohlsearch<CR>

        " make Y behave like D or C
        nnoremap Y y$
    "}

    " plugins {
        vnoremap <silent> <Enter> :EasyAlign<Enter>
        nmap <c-f> :CtrlPMRU<CR>

        " marks
        nmap <unique> <silent> <Leader>, <Plug>MarkSet </Plug></Leader></silent></unique>
        vmap <unique> <silent> <Leader>, <Plug>MarkSet </Plug></Leader></silent></unique>
        nmap <unique> <silent> <leader>x <Plug>MarkClear </Plug></leader></silent></unique>
    "}
"}
