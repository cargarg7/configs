" general options {
    set gdefault " don't need to add /g in search/replace
    set nofoldenable " disable code folding
    set nospell " disable spell check
    set undodir=~/.vim/undo
    set virtualedit=block "free block select
    set wrap " don't cut lines
    set nocursorline
    set tabpagemax=25
    set viewoptions=folds,cursor,unix,slash

    set timeoutlen=250 " lower leader key timeout
    set ttyfast
    set synmaxcol=320
    set lazyredraw " to avoid scrolling problems

    set t_ts=]2;
    set t_fs=
    set iskeyword-=$
    set iskeyword-=-

    " symfony autocomplete
    let g:spf13_no_autochdir = 1

    " use ag over grep
    if executable('ag')
      set grepprg=ag\ --nogroup\ --nocolor
    endif

    " from https://bitbucket.org/sjl/dotfiles/src/1b6ffba66e9f/vim/.vimrc {
        " Sudo to write
        cmap w!! w !sudo tee % >/dev/null
    " }
"}

" plugin options {
    " enabled groups is in .before file
    " Vundle {
        UnBundle 'gorodinskiy/vim-coloresque'
        UnBundle 'spf13/PIV'
        " use my fork
        UnBundle 'tpope/vim-markdown'
    "}

    " Syntastic {
        " play with angularJS
        let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
    " }

    " php refactor {
        let g:php_refactor_command='php ~/bin/refactor.phar'
    "}

    " phpcomplete-extended {
        "autocmd FileType php setlocal omnifunc=phpcomplete_extended#CompletePHP
        "let g:phpcomplete_index_composer_command="composer.phar"
    "}

    " neocomplete {
        "let g:SuperTabDefaultCompletionType = "<c-x><c-o>"
        "let g:symfony_app_console_path= "/Users/gonzalo/Development/socialpoint/sp-platform-dragoncity/app/console"
        "let g:acp_enableAtStartup = 0
        "let g:neosnippet#disable_runtime_snippets = { "_": 1, }
    "}

    " tagbar {
        let g:tagbar_compact = 1
        let g:tagbar_width = 30
        let g:tagbar_type_php  = { 'ctagstype' : 'php', 'kinds' : [ 'i:interfaces', 'c:classes', 'd:constant definitions', 'f:functions', 'j:javascript functions:1' ] }
        map <c-l> :TagbarToggle<CR>
    "}

    " mark {
        hi MarkWord1  ctermbg=Red      ctermfg=Black  guibg=#FF7272    guifg=Black
        hi MarkWord2  ctermbg=Blue     ctermfg=Black  guibg=#9999FF    guifg=Black
        hi MarkWord3  ctermbg=Magenta  ctermfg=Black  guibg=#FFB3FF    guifg=Black
        hi MarkWord4  ctermbg=Green    ctermfg=Black  guibg=#A4E57E    guifg=Black
        hi MarkWord5  ctermbg=Cyan     ctermfg=Black  guibg=#8CCBEA    guifg=Black
        hi MarkWord6  ctermbg=Yellow   ctermfg=Black  guibg=#FFDB72    guifg=Black
    " }

    "others {
        let g:DisableAutoPHPFolding=1 " disable PIV's folding
        let g:indent_guides_enable_on_vim_startup = 0
    "}
"}

" abbreviations {
    " erlang {
        iab iof io:format("~n~p~n", []),
        iab ioff io:format("~n------~n~p~n------~n", []),
        iab iofff io:format("~n------~n~p~n~p~n------~n", []),
        iab ioffff io:format("~n------~n~p~n~p~n~p~n------~n", []),
    "}

    " php {
        iab errl error_log(date('Y-m-d H:i:s') . " " . "\n", 3, '/tmp/my_error.log');
        iab ymd date('Y-m-d H:i:s',
    "}

    " others {
        ab brr . "<br/>"
    "}
"}

" mappings {
    " custom {
        " tab movement {
            nmap <C-j> :tabprevious<CR>
            nmap <C-k> :tabnext<CR>
        "}

        " file upload {
            "nmap <C-a> :w<CR>:!up2prod %:p gonzalo<CR>
            "nmap <c-x> :w<CR>:!ffrefresh<CR><CR>
            "nmap <C-s> :w<CR>:!upload2prod %:p gonzalo<CR><CR>
            "nmap <c-x> :w<CR>:!upload2prod %:p gonzalo && ffrefresh<CR><CR>
        "}

        " git diff {
            map <c-d> :!diffwrapper %:p<cr>
            map <c-g> :!GIT_PAGER='' git diff %<cr>
            map <c-h> :!git lp %<cr>
        "}

        " tag jumping {
            nnoremap <c-]> g<c-]>
            vnoremap <c-]> g<c-]>
            nnoremap g<c-]> <c-]>
            vnoremap g<c-]> <c-]>
            nnoremap t g<c-]>
            vnoremap t g<c-]>
        "}
        " keep blocks selected when indenting {
            vnoremap < <gv
            vnoremap > >gv
        "}
    "}

    " general {
        " convert encrypted save :X in plain save :x
        cnoremap <expr> X (getcmdtype() is# ':' && empty(getcmdline())) ? 'x' : 'X'

        " make C-c behave like Esc
        inoremap <silent> <C-C> <Esc>
        nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR> " bind K to grep word under cursor

        " stop from entering ex mode on accident
        nnoremap Q <nop>

        " simulate emacs' transpose feature
        nnoremap <Leader><Leader>l /\<<CR>yiw?\<<CR>viwp/\<<CR>viwp:noh<CR>
        nnoremap <Leader><Leader>h ?\w\><CR>yiw/\<<CR>viwp?\w\><CR>viwp:noh<CR>a

        " copy current line sans leading/trailing whitespace
        nnoremap gy m`^yg_``"

        " next/previous word under cursor in same column
        nnoremap g* yiw/^.*\%<C-r>=col('.')<CR>c\zs<C-r>"<CR>
        nnoremap g# yiw?^.*\%<C-r>=col('.')<CR>c\zs<C-r>"<CR>" * and # without moving the cursor

        " searches will center on the line it's found in.
        map N Nzz
        map n nzz

        " fill current line with previus line word by word
        imap <expr> <c-u> matchstr(getline(line('.')-1), '\%' . virtcol('.') . 'v\%(\k\+\s\=\\|.\)')

        " make BS/DEL work as expected in visual modes
        vmap <BS> x

        " delete in normal mode to switch off highlighting till next search and clear messages
        nmap <silent> <BS> :nohlsearch<CR>

        " make Y behave like D or C
        nnoremap Y y$
    "}

    " plugins {
        vnoremap <c-d> :call PhpDocRange()<CR>
        vnoremap <c-a> :EasyAlign<Enter>
        nmap <c-f> :CtrlPMRU<CR>
        nmap <c-b> :CtrlPBuffer<CR>

        " marks
        nmap <c-m> <Plug>MarkSet
        nmap <c-x> <Plug>MarkClear </Plug></leader></silent></unique>

        " expand region
        vmap v <Plug>(expand_region_expand)
        vmap <C-v> <Plug>(expand_region_shrink)

        " git heatmap
        let g:smeargle_colouring_scheme = ''
    "}
"}

" from instanly better vim {
    " highlight column 121 (too long line)
    highlight ColorColumn ctermbg=magenta
    call matchadd('ColorColumn', '\%121v', 100)
" }

" Next and Last {
    " from https://bitbucket.org/sjl/dotfiles/src/1b6ffba66e9f/vim/.vimrc#cl-1023
    " Motion for "next/last object". For example, "din(" would go to the next "()" pair
    " and delete its contents.

    onoremap an :<c-u>call <SID>NextTextObject('a', 'f')<cr>
    xnoremap an :<c-u>call <SID>NextTextObject('a', 'f')<cr>
    onoremap in :<c-u>call <SID>NextTextObject('i', 'f')<cr>
    xnoremap in :<c-u>call <SID>NextTextObject('i', 'f')<cr>

    onoremap al :<c-u>call <SID>NextTextObject('a', 'F')<cr>
    xnoremap al :<c-u>call <SID>NextTextObject('a', 'F')<cr>
    onoremap il :<c-u>call <SID>NextTextObject('i', 'F')<cr>
    xnoremap il :<c-u>call <SID>NextTextObject('i', 'F')<cr>

    function! s:NextTextObject(motion, dir)
      let c = nr2char(getchar())

      if c ==# "b"
          let c = "("
      elseif c ==# "B"
          let c = "{"
      elseif c ==# "d"
          let c = "["
      endif

      exe "normal! ".a:dir.c."v".a:motion.c
    endfunction
" }

" Handle URL {
        " OSX only: Open a web-browser with the URL in the current line
        function! HandleURI()
            let s:uri = matchstr(getline("."), '[a-z]*:\/\/[^ >,;]*')
            echo s:uri
            if s:uri != ""
                exec "!open \"" . s:uri . "\""
            else
                echo "No URI found in line."
            endif
        endfunction
        map <leader>u :call HandleURI()<CR>
" }
